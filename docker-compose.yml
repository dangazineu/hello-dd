version: '3.8'

# YAML anchors for common configurations
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

x-common-env-vars: &common-env-vars
  DD_ENV: ${DD_ENV:-development}
  DD_SERVICE: ${DD_SERVICE}
  DD_VERSION: ${DD_VERSION:-1.0.0}
  DD_AGENT_HOST: ${DD_AGENT_HOST:-datadog-agent}
  DD_TRACE_AGENT_PORT: ${DD_TRACE_AGENT_PORT:-8126}
  LOG_LEVEL: ${LOG_LEVEL:-INFO}

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hello-dd-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-inventory}"]
    networks:
      - hello-dd-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hello-dd-redis
    command: redis-server --appendonly yes --appendfsync everysec
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "ping"]
    networks:
      - hello-dd-network
    restart: unless-stopped

  # API Gateway Service (Python/FastAPI)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: hello-dd-api-gateway
    environment:
      <<: *common-env-vars
      DD_SERVICE: api-gateway
      SERVICE_PORT: ${API_GATEWAY_PORT:-8000}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      INVENTORY_SERVICE_URL: ${INVENTORY_SERVICE_URL:-http://inventory-service:8001}
      PRICING_SERVICE_URL: ${PRICING_SERVICE_URL:-http://pricing-service:8002}
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8000/health')"]
    networks:
      - hello-dd-network
    restart: unless-stopped

  # Inventory Service (Java/Spring Boot)
  # Uncomment when service is implemented
  # inventory-service:
  #   build:
  #     context: ./inventory-service
  #     dockerfile: Dockerfile
  #   container_name: hello-dd-inventory-service
  #   environment:
  #     <<: *common-env-vars
  #     DD_SERVICE: inventory-service
  #     SERVICE_PORT: ${INVENTORY_SERVICE_PORT:-8001}
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-inventory}
  #     SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
  #     SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
  #     SPRING_JPA_HIBERNATE_DDL_AUTO: validate
  #     SPRING_PROFILES_ACTIVE: docker
  #   ports:
  #     - "${INVENTORY_SERVICE_PORT:-8001}:8001"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   healthcheck:
  #     <<: *healthcheck-defaults
  #     test: ["CMD", "curl", "-f", "http://localhost:8001/actuator/health"]
  #   networks:
  #     - hello-dd-network
  #   restart: unless-stopped

  # Pricing Service (Go/Gin)
  # Uncomment when service is implemented
  # pricing-service:
  #   build:
  #     context: ./pricing-service
  #     dockerfile: Dockerfile
  #   container_name: hello-dd-pricing-service
  #   environment:
  #     <<: *common-env-vars
  #     DD_SERVICE: pricing-service
  #     SERVICE_PORT: ${PRICING_SERVICE_PORT:-8002}
  #     REDIS_HOST: ${REDIS_HOST:-redis}
  #     REDIS_PORT: ${REDIS_PORT:-6379}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD:-}
  #     CACHE_TTL: ${CACHE_TTL:-300}
  #   ports:
  #     - "${PRICING_SERVICE_PORT:-8002}:8002"
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   healthcheck:
  #     <<: *healthcheck-defaults
  #     test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
  #   networks:
  #     - hello-dd-network
  #   restart: unless-stopped

  # Datadog Agent (Optional - for Phase 2)
  # Uncomment when ready for instrumentation testing
  # datadog-agent:
  #   image: datadog/agent:latest
  #   container_name: hello-dd-datadog-agent
  #   environment:
  #     DD_API_KEY: ${DD_API_KEY}
  #     DD_SITE: ${DD_SITE:-datadoghq.com}
  #     DD_APM_ENABLED: "true"
  #     DD_APM_NON_LOCAL_TRAFFIC: "true"
  #     DD_LOGS_ENABLED: "true"
  #     DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: "true"
  #     DD_CONTAINER_EXCLUDE: "image:datadog/agent"
  #   ports:
  #     - "8126:8126"  # APM port
  #     - "8125:8125"  # DogStatsD port
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /proc/:/host/proc/:ro
  #     - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
  #   networks:
  #     - hello-dd-network
  #   restart: unless-stopped

networks:
  hello-dd-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local