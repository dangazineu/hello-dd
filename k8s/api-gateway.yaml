---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: default
  labels:
    app: api-gateway
    component: gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        component: gateway
        # Datadog Unified Service Tags
        tags.datadoghq.com/env: "dev"
        tags.datadoghq.com/service: "api-gateway"
        tags.datadoghq.com/version: "1.0.0"
    spec:
      containers:
      - name: api-gateway
        image: 157626804532.dkr.ecr.us-east-1.amazonaws.com/hello-dd/api-gateway:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        env:
        # Application configuration
        - name: PORT
          value: "8000"
        - name: HOST
          value: "0.0.0.0"
        - name: LOG_LEVEL
          value: "info"
        # PostgreSQL configuration (optional - service will work without it)
        - name: POSTGRES_HOST
          value: "postgres"  # Will use in-cluster postgres if deployed, otherwise graceful degradation
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "inventory"
        # Redis configuration (optional - service will work without it)
        - name: REDIS_HOST
          value: "redis"  # Will use in-cluster redis if deployed, otherwise graceful degradation
        - name: REDIS_PORT
          value: "6379"
        # Service URLs for inter-service communication
        - name: INVENTORY_SERVICE_URL
          value: "http://inventory-service:8001"
        - name: PRICING_SERVICE_URL
          value: "http://pricing-service:8002"
        # Datadog environment variables
        - name: DD_ENV
          value: "dev"
        - name: DD_SERVICE
          value: "api-gateway"
        - name: DD_VERSION
          value: "1.0.0"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: default
  labels:
    app: api-gateway
    component: gateway
spec:
  type: LoadBalancer
  selector:
    app: api-gateway
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  sessionAffinity: None
